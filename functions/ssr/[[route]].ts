import { Hono } from "hono";
import { handle } from "hono/cloudflare-pages";
import { logger } from "hono/logger";
import { html } from "hono/html";

const app = new Hono();
app.use("*", logger());

// let hasThirdParties = false;
let third_parties = [] as string[];

// app.notFound((ctx) => {
// const params = ctx.req.param();
//   return ctx.json({ message: "Not Found", ok: false }, 404);
// });

const headHandlers: HTMLRewriterElementContentHandlers = {
  comments: (c) => {
    console.log("comment in <head>", c.text);
  },
};

const injectOnLoad = (third_parties: string[]) => {
  console.log(`inject ${third_parties.length} snippets in window.onload`);
  return `window.onload = (event) => {
    console.log('page is fully loaded', event);
    console.log('load some 3rd party script');
  }`;
};

const docHandlers: HTMLRewriterDocumentContentHandlers = {
  end: (docEnd) => {
    console.log("ðŸš€ ~ docEnd:", docEnd);
  },
};

const bodyHandlers: HTMLRewriterElementContentHandlers = {
  element: (el) => {
    el.onEndTag((tag) => {
      tag.before(`<script>${injectOnLoad(third_parties)}</script>`, {
        html: true,
      });
    });
  },
};

const scriptHandlers: HTMLRewriterElementContentHandlers = {
  element: (el) => {
    const src = el.getAttribute("src");
    if (src) {
      const matches = src.match(
        /^https:\/\/www\.googletagmanager\.com\/gtag\/js\?id=.*/
      );
      if (matches) {
        third_parties.push(src);
        el.remove();
        // const my_script = document.createElement('script');
        // my_script.setAttribute('src','http://example.com/site.js');
        // document.body.appendChild(my_script)
      }
    }
    // el.setAttribute("href", "https://www.youtube.com/watch?v=dQw4w9WgXcQ");
    // console.log(`${before} => ${el.getAttribute("href")}`);
  },
};

const aHrefHandlers: HTMLRewriterElementContentHandlers = {
  element: (el) => {
    const before = el.getAttribute("href");
    el.setAttribute("href", "https://www.youtube.com/watch?v=dQw4w9WgXcQ");
    console.log(`${before} => ${el.getAttribute("href")}`);
  },
  text: (t) => {
    switch (t.text) {
      case "Some link": {
        t.replace(`<i>You have been rickrolled</i>`, { html: true });
        t.after(`<b>!!!</b>`, { html: true });
        break;
      }
      default: {
        console.log(t.text);
      }
    }
  },
};

const rewriter = new HTMLRewriter()
  .onDocument(docHandlers)
  .on("head", headHandlers)
  .on("head script", scriptHandlers)
  .on("body", bodyHandlers)
  .on("a[href]", aHrefHandlers);

app.get("/aaa", (ctx) => {
  const paragraph = `This paragraph was generated by the server at ${new Date().toISOString()}`;

  const res = ctx.html(
    html`<!DOCTYPE html>
      <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="description" content="Web Performance Audit worker" />
        <title>AAA</title>
        <!-- TODO: <link rel="canonical" href="{{ absolute page URL }}"> -->
        <!-- TODO: OGP meta Tags for Facebook -->
        <!-- TODO: Twitter card -->
        <script
          async
          src="https://www.googletagmanager.com/gtag/js?id=G-DNJN1PF3CS"
        ></script>
      </head>
      <body>
        <h1>AAA Route</h1>
        <p>${paragraph}</p>
        <p>URL: ${ctx.req.url}</p>
        <a href="https://www.giacomodebidda.com/">Some link</a>
      </body> `
  );

  return rewriter.transform(res);
});

app.get("/bbb", (ctx) => {
  const paragraph = `This random is ${Math.random()}`;

  return ctx.html(
    html`<!DOCTYPE html>
      <head>
        <meta charset="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1.0" />
        <meta name="description" content="Web Performance Audit worker" />
        <title>BBB</title>
        <!-- TODO: <link rel="canonical" href="{{ absolute page URL }}"> -->
        <!-- TODO: OGP meta Tags for Facebook -->
        <!-- TODO: Twitter card -->
      </head>
      <body>
        <h1>BBB Route</h1>
        <p>${paragraph}</p>
        <p>URL: ${ctx.req.url}</p>
      </body> `
  );
});

export const onRequest = handle(app, "/ssr");
